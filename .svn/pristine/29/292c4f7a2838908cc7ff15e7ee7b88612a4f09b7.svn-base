<?php

defined('BASEPATH') OR exit('No direct script access allowed');

class Mensaje_model extends MY_Model {

	public function __construct() {
		parent::__construct();
		$this->table_name = 'mensaje';
		$this->msg_name = 'Mensaje';
		$this->id_name = 'id';
		$this->columnas = array('id', 'fecha','conversacion_id', 'de_usuario_id', 'de_rol_id', 'de_entidad_id', 'asunto', 'mensaje', 'para_usuario_id', 'para_rol_id', 'para_entidad_id', 'leido_fecha', 'leido_usuario_id');
		$this->fields = array(
			'de' => array('label' => 'De', 'readonly' => TRUE),
			'asunto' => array('label' => 'Asunto', 'maxlength' => '100', 'required' => TRUE),
			'mensaje' => array('label' => 'Mensaje', 'form_type' => 'textarea', 'rows' => '5', 'required' => TRUE),
			'para_rol' => array('label' => 'Para', 'input_type' => 'combo', 'id_name' => 'para_rol_id'),
			'para_entidad' => array('label' => '&nbsp;', 'input_type' => 'combo', 'id_name' => 'para_entidad_id'),
		);
		$this->requeridos = array('fecha', 'de_usuario_id', 'de_rol_id', 'asunto', 'mensaje');
		//$this->unicos = array();
		$this->default_join = array(
			array('usuario d_u', 'd_u.id = mensaje.de_usuario_id', 'left'),
			array('usuario_persona d_up', 'd_u.id = d_up.usuario_id', 'left'),
			array('persona d_p', 'd_up.cuil = d_p.cuil', 'left', array("CONCAT(d_p.apellido, ', ', d_p.nombre) as de_usuario")),
			array('rol d_r', 'd_r.id = mensaje.de_rol_id', 'left'),
			array('entidad_tipo d_et', 'd_r.entidad_tipo_id = d_et.id', 'left'),
			array('entidad d_e', 'd_e.id = mensaje.de_entidad_id AND d_et.tabla = d_e.tabla', 'left', array("CONCAT(d_r.nombre, COALESCE(CONCAT(' ', d_e.nombre), '')) as de_rol", 'd_et.tabla as de_tabla')),
			array('usuario p_u', 'p_u.id = mensaje.para_usuario_id', 'left'),
			array('usuario_persona p_up', 'p_u.id = p_up.usuario_id', 'left'),
			array('persona p_p', 'p_up.cuil = p_p.cuil', 'left', array("CONCAT(p_p.apellido, ', ', p_p.nombre) as para_usuario")),
			array('rol p_r', 'p_r.id = mensaje.para_rol_id', 'left'),
			array('entidad_tipo p_et', 'p_r.entidad_tipo_id = p_et.id', 'left'),
			array('entidad p_e', 'p_e.id = mensaje.para_entidad_id AND p_et.tabla = p_e.tabla', 'left', array("CONCAT(p_r.nombre, COALESCE(CONCAT(' ', p_e.nombre), '')) as para_rol")),
			array('usuario l_u', 'l_u.id = mensaje.leido_usuario_id', 'left'),
			array('usuario_persona l_up', 'l_u.id = l_up.usuario_id', 'left'),
			array('persona l_p', 'l_up.cuil = l_p.cuil', 'left', array("CONCAT(l_p.apellido, ', ', l_p.nombre) as leido_usuario")),
		);
	}

	public function get_mensajes($usuario_id, $rol = NULL, $no_leidos = TRUE) {
		$query = $this->db->select("mensaje.id, mensaje.fecha, mensaje.asunto, mensaje.mensaje, CONCAT(d_p.apellido, ', ', d_p.nombre) as de_usuario, CONCAT(d_r.nombre, COALESCE(CONCAT(' ', d_e.nombre), '')) as de_rol, CONCAT(p_p.apellido, ', ', p_p.nombre) as para_usuario, CONCAT(p_r.nombre, COALESCE(CONCAT(' ', p_e.nombre), '')) as para_rol")
			->from('mensaje')
			->join('usuario d_u', 'd_u.id = mensaje.de_usuario_id', 'left')
			->join('usuario_persona d_up', 'd_u.id = d_up.usuario_id', 'left')
			->join('persona d_p', 'd_up.cuil = d_p.cuil', 'left')
			->join('rol d_r', 'd_r.id = mensaje.de_rol_id', 'left')
			->join('entidad_tipo d_et', 'd_r.entidad_tipo_id = d_et.id', 'left')
			->join('entidad d_e', 'd_e.id = mensaje.de_entidad_id AND d_et.tabla = d_e.tabla', 'left')
			->join('usuario p_u', 'p_u.id = mensaje.para_usuario_id', 'left')
			->join('usuario_persona p_up', 'p_u.id = p_up.usuario_id', 'left')
			->join('persona p_p', 'p_up.cuil = p_p.cuil', 'left')
			->join('rol p_r', 'p_r.id = mensaje.para_rol_id', 'left')
			->join('entidad_tipo p_et', 'p_r.entidad_tipo_id = p_et.id', 'left')
			->join('entidad p_e', 'p_e.id = mensaje.para_entidad_id AND p_et.tabla = p_e.tabla', 'left');
		if ($no_leidos) {
			$query->where('leido_fecha IS NULL');
		}
		if (isset($rol)) {
			$query->group_start();
			$query->group_start();
			$query->where('p_r.codigo', $rol->codigo);
			$query->where('para_entidad_id', $rol->entidad_id);
			$query->group_end();
			$query->or_where('para_usuario_id', $usuario_id);
			$query->group_end();
		} else {
			$query->where('para_usuario_id', $usuario_id);
		}
		return $query->get()->result();
	}

	/**
	 * _can_delete: Devuelve true si puede eliminarse el registro.
	 *
	 * @param int $delete_id
	 * @return bool
	 */
	protected function _can_delete($delete_id) {
		return TRUE;
	}
}
/* End of file Mensaje_model.php */
/* Location: ./application/models/Mensaje_model.php */